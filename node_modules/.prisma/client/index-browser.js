
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  role: 'role'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  logoUrl: 'logoUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId'
};

exports.Prisma.SalesManagerScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.PlumberScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.AccountantScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.DistributorScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.FieldExecutiveScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.WorkerScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  stockQuantity: 'stockQuantity',
  warrantyPeriodInMonths: 'warrantyPeriodInMonths',
  categoryId: 'categoryId'
};

exports.Prisma.StockScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  status: 'status',
  location: 'location'
};

exports.Prisma.WarrantyCardScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  serialNumber: 'serialNumber',
  purchaseDate: 'purchaseDate',
  expiryDate: 'expiryDate',
  scanQR: 'scanQR',
  validViaWarranIQ: 'validViaWarranIQ'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  date: 'date',
  checkIn: 'checkIn',
  checkOut: 'checkOut'
};

exports.Prisma.CustomerFollowUpScalarFieldEnum = {
  id: 'id',
  executiveId: 'executiveId',
  customerName: 'customerName',
  contactDetails: 'contactDetails',
  feedback: 'feedback',
  status: 'status',
  nextFollowUpDate: 'nextFollowUpDate'
};

exports.Prisma.PointTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  points: 'points',
  creditAmount: 'creditAmount',
  date: 'date',
  reason: 'reason',
  type: 'type'
};

exports.Prisma.IncentiveScalarFieldEnum = {
  id: 'id',
  description: 'description',
  points: 'points',
  assignedId: 'assignedId',
  assignedAt: 'assignedAt'
};

exports.Prisma.DVRScalarFieldEnum = {
  id: 'id',
  executiveId: 'executiveId',
  feedback: 'feedback',
  location: 'location'
};

exports.Prisma.DeliveryReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  product: 'product',
  quantity: 'quantity',
  isForecasted: 'isForecasted',
  qrRequested: 'qrRequested',
  submittedAt: 'submittedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  orderDate: 'orderDate',
  promoCodeId: 'promoCodeId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  unitPrice: 'unitPrice'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  invoiceDate: 'invoiceDate',
  totalAmount: 'totalAmount',
  pdfUrl: 'pdfUrl',
  status: 'status',
  sentAt: 'sentAt',
  paidAt: 'paidAt',
  dueDate: 'dueDate'
};

exports.Prisma.LiveLocationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  latitude: 'latitude',
  longitude: 'longitude',
  timeStamp: 'timeStamp'
};

exports.Prisma.ShiftAlertScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  message: 'message',
  createdAt: 'createdAt',
  acknowledged: 'acknowledged'
};

exports.Prisma.RegisterWarrantyScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  serialNumber: 'serialNumber',
  purchaseDate: 'purchaseDate',
  warrantyMonths: 'warrantyMonths',
  sellerId: 'sellerId',
  registeredAt: 'registeredAt',
  qrImage: 'qrImage'
};

exports.Prisma.PostDeliveryReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  product: 'product',
  quantity: 'quantity',
  submittedAt: 'submittedAt'
};

exports.Prisma.CommissionedWorkScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  latitude: 'latitude',
  longitude: 'longitude',
  qrCode: 'qrCode',
  qrImage: 'qrImage',
  appliedAt: 'appliedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantity: 'quantity',
  addedAt: 'addedAt'
};

exports.Prisma.PromoCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  discountType: 'discountType',
  discountValue: 'discountValue',
  minOrderAmount: 'minOrderAmount',
  maxDiscount: 'maxDiscount',
  usageLimit: 'usageLimit',
  usedCount: 'usedCount',
  status: 'status',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  createdAt: 'createdAt'
};

exports.Prisma.AuditScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  message: 'message',
  userId: 'userId',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.FinancialLogScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  description: 'description',
  category: 'category',
  reference: 'reference',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  Admin: 'Admin',
  SalesManager: 'SalesManager',
  Plumber: 'Plumber',
  Accountant: 'Accountant',
  Distributor: 'Distributor',
  FieldExecutive: 'FieldExecutive',
  Worker: 'Worker'
};

exports.StockStatus = exports.$Enums.StockStatus = {
  Available: 'Available',
  Moved: 'Moved',
  Missing: 'Missing'
};

exports.FollowUpStatus = exports.$Enums.FollowUpStatus = {
  Pending: 'Pending',
  Completed: 'Completed',
  Postponed: 'Postponed'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  Earned: 'Earned',
  Claimed: 'Claimed',
  Adjusted: 'Adjusted'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  Pending: 'Pending',
  Completed: 'Completed',
  Cancelled: 'Cancelled'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  Draft: 'Draft',
  Sent: 'Sent',
  Paid: 'Paid',
  Overdue: 'Overdue',
  Cancelled: 'Cancelled'
};

exports.CartStatus = exports.$Enums.CartStatus = {
  Active: 'Active',
  CheckedOut: 'CheckedOut',
  Abandoned: 'Abandoned'
};

exports.PromoCodeStatus = exports.$Enums.PromoCodeStatus = {
  Active: 'Active',
  Inactive: 'Inactive',
  Expired: 'Expired'
};

exports.FinancialLogType = exports.$Enums.FinancialLogType = {
  Income: 'Income',
  Expense: 'Expense',
  Transfer: 'Transfer',
  Adjustment: 'Adjustment'
};

exports.Prisma.ModelName = {
  User: 'User',
  Company: 'Company',
  Admin: 'Admin',
  SalesManager: 'SalesManager',
  Plumber: 'Plumber',
  Accountant: 'Accountant',
  Distributor: 'Distributor',
  FieldExecutive: 'FieldExecutive',
  Worker: 'Worker',
  Product: 'Product',
  Stock: 'Stock',
  WarrantyCard: 'WarrantyCard',
  Attendance: 'Attendance',
  CustomerFollowUp: 'CustomerFollowUp',
  PointTransaction: 'PointTransaction',
  Incentive: 'Incentive',
  DVR: 'DVR',
  DeliveryReport: 'DeliveryReport',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Invoice: 'Invoice',
  LiveLocation: 'LiveLocation',
  ShiftAlert: 'ShiftAlert',
  RegisterWarranty: 'RegisterWarranty',
  PostDeliveryReport: 'PostDeliveryReport',
  CommissionedWork: 'CommissionedWork',
  Category: 'Category',
  Cart: 'Cart',
  CartItem: 'CartItem',
  PromoCode: 'PromoCode',
  Audit: 'Audit',
  Notification: 'Notification',
  FinancialLog: 'FinancialLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
